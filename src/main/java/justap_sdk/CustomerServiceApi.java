/*
 * Justap API
 * 欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 转换为 utf8 编码并计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks 
 *
 * OpenAPI spec version: 1.0
 * Contact: support@justap.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package justap_sdk;

import justap.ApiCallback;
import justap.ApiClient;
import justap.ApiException;
import justap.ApiResponse;
import justap.Configuration;
import justap.Pair;
import justap.ProgressRequestBody;
import justap.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GooglerpcStatus;
import io.swagger.client.model.RpcStatus;
import io.swagger.client.model.V1CreateCustomerRequest;
import io.swagger.client.model.V1CustomerListResponse;
import io.swagger.client.model.V1CustomerResponse;
import io.swagger.client.model.V1DeleteCustomerResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerServiceApi {
    private ApiClient apiClient;

    public CustomerServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for customerServiceCreateCustomer
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceCreateCustomerCall(V1CreateCustomerRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceCreateCustomerValidateBeforeCall(V1CreateCustomerRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling customerServiceCreateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerServiceCreateCustomerCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return V1CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CustomerResponse customerServiceCreateCustomer(V1CreateCustomerRequest body) throws ApiException {
        ApiResponse<V1CustomerResponse> resp = customerServiceCreateCustomerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;V1CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CustomerResponse> customerServiceCreateCustomerWithHttpInfo(V1CreateCustomerRequest body) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceCreateCustomerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceCreateCustomerAsync(V1CreateCustomerRequest body, final ApiCallback<V1CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceCreateCustomerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerServiceDeleteCustomer
     * @param id  (required)
     * @param appId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceDeleteCustomerCall(String id, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_id", appId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceDeleteCustomerValidateBeforeCall(String id, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerServiceDeleteCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerServiceDeleteCustomerCall(id, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @return V1DeleteCustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1DeleteCustomerResponse customerServiceDeleteCustomer(String id, String appId) throws ApiException {
        ApiResponse<V1DeleteCustomerResponse> resp = customerServiceDeleteCustomerWithHttpInfo(id, appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @return ApiResponse&lt;V1DeleteCustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1DeleteCustomerResponse> customerServiceDeleteCustomerWithHttpInfo(String id, String appId) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceDeleteCustomerValidateBeforeCall(id, appId, null, null);
        Type localVarReturnType = new TypeToken<V1DeleteCustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceDeleteCustomerAsync(String id, String appId, final ApiCallback<V1DeleteCustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceDeleteCustomerValidateBeforeCall(id, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1DeleteCustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerServiceListAllCustomers
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param startingAfter [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param endingBefore [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param createdLt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceListAllCustomersCall(String appId, Integer limit, String startingAfter, String endingBefore, Long createdLt, Long createdLte, Long createdGt, Long createdGte, Boolean disabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_id", appId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (startingAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("starting_after", startingAfter));
        if (endingBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ending_before", endingBefore));
        if (createdLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.lt", createdLt));
        if (createdLte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.lte", createdLte));
        if (createdGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.gt", createdGt));
        if (createdGte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.gte", createdGte));
        if (disabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disabled", disabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceListAllCustomersValidateBeforeCall(String appId, Integer limit, String startingAfter, String endingBefore, Long createdLt, Long createdLte, Long createdGt, Long createdGte, Boolean disabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerServiceListAllCustomersCall(appId, limit, startingAfter, endingBefore, createdLt, createdLte, createdGt, createdGte, disabled, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param startingAfter [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param endingBefore [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param createdLt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     * @return V1CustomerListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CustomerListResponse customerServiceListAllCustomers(String appId, Integer limit, String startingAfter, String endingBefore, Long createdLt, Long createdLte, Long createdGt, Long createdGte, Boolean disabled) throws ApiException {
        ApiResponse<V1CustomerListResponse> resp = customerServiceListAllCustomersWithHttpInfo(appId, limit, startingAfter, endingBefore, createdLt, createdLte, createdGt, createdGte, disabled);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param startingAfter [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param endingBefore [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param createdLt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     * @return ApiResponse&lt;V1CustomerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CustomerListResponse> customerServiceListAllCustomersWithHttpInfo(String appId, Integer limit, String startingAfter, String endingBefore, Long createdLt, Long createdLte, Long createdGt, Long createdGte, Boolean disabled) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceListAllCustomersValidateBeforeCall(appId, limit, startingAfter, endingBefore, createdLt, createdLte, createdGt, createdGte, disabled, null, null);
        Type localVarReturnType = new TypeToken<V1CustomerListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param startingAfter [OPTIONAL] 在分页时使用的指针，决定了列表的第一项从何处开始。假设你的一次请求返回列表的最后一项的 id 是 obj_end，你可以使用 starting_after &#x3D; obj_end 去获取下一页 (optional)
     * @param endingBefore [OPTIONAL] 在分页时使用的指针，决定了列表的最末项在何处结束。假设你的一次请求返回列表的第一项的 id 是 obj_start，你可以使用 ending_before &#x3D; obj_start 去获取上一页 (optional)
     * @param createdLt 大于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 charge 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param disabled [OPTIONAL] 是否禁用，默认为 false (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceListAllCustomersAsync(String appId, Integer limit, String startingAfter, String endingBefore, Long createdLt, Long createdLte, Long createdGt, Long createdGte, Boolean disabled, final ApiCallback<V1CustomerListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceListAllCustomersValidateBeforeCall(appId, limit, startingAfter, endingBefore, createdLt, createdLte, createdGt, createdGte, disabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CustomerListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerServiceRetrieveCustomer
     * @param id  (required)
     * @param appId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceRetrieveCustomerCall(String id, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_id", appId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceRetrieveCustomerValidateBeforeCall(String id, String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerServiceRetrieveCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerServiceRetrieveCustomerCall(id, appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @return V1CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CustomerResponse customerServiceRetrieveCustomer(String id, String appId) throws ApiException {
        ApiResponse<V1CustomerResponse> resp = customerServiceRetrieveCustomerWithHttpInfo(id, appId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @return ApiResponse&lt;V1CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CustomerResponse> customerServiceRetrieveCustomerWithHttpInfo(String id, String appId) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceRetrieveCustomerValidateBeforeCall(id, appId, null, null);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceRetrieveCustomerAsync(String id, String appId, final ApiCallback<V1CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceRetrieveCustomerValidateBeforeCall(id, appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerServiceSearchCustomers
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param createdLt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceSearchCustomersCall(String appId, Integer limit, Long createdLt, Long createdLte, Long createdGt, Long createdGte, String email, String name, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_id", appId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.lt", createdLt));
        if (createdLte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.lte", createdLte));
        if (createdGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.gt", createdGt));
        if (createdGte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created.gte", createdGte));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceSearchCustomersValidateBeforeCall(String appId, Integer limit, Long createdLt, Long createdLte, Long createdGt, Long createdGte, String email, String name, String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerServiceSearchCustomersCall(appId, limit, createdLt, createdLte, createdGt, createdGte, email, name, phone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param createdLt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     * @return V1CustomerListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CustomerListResponse customerServiceSearchCustomers(String appId, Integer limit, Long createdLt, Long createdLte, Long createdGt, Long createdGte, String email, String name, String phone) throws ApiException {
        ApiResponse<V1CustomerListResponse> resp = customerServiceSearchCustomersWithHttpInfo(appId, limit, createdLt, createdLte, createdGt, createdGte, email, name, phone);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param createdLt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     * @return ApiResponse&lt;V1CustomerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CustomerListResponse> customerServiceSearchCustomersWithHttpInfo(String appId, Integer limit, Long createdLt, Long createdLte, Long createdGt, Long createdGte, String email, String name, String phone) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceSearchCustomersValidateBeforeCall(appId, limit, createdLt, createdLte, createdGt, createdGte, email, name, phone, null, null);
        Type localVarReturnType = new TypeToken<V1CustomerListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (optional)
     * @param limit [OPTIONAL] 限制有多少对象可以被返回，限制范围是从 1~100 项，默认是 10 项 (optional, default to 10)
     * @param createdLt 大于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdLte 大于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGt 小于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param createdGte 小于或等于 BusinessUser 对象的创建时间，用 Unix 时间戳表示 (optional, default to 0)
     * @param email [OPTIONAL] BusinessUser 对象的邮箱地址。支持模糊匹配 (optional)
     * @param name [OPTIONAL] BusinessUser 对象的用户名。支持模糊匹配 (optional)
     * @param phone [OPTIONAL] BusinessUser 对象的手机号码 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceSearchCustomersAsync(String appId, Integer limit, Long createdLt, Long createdLte, Long createdGt, Long createdGte, String email, String name, String phone, final ApiCallback<V1CustomerListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceSearchCustomersValidateBeforeCall(appId, limit, createdLt, createdLte, createdGt, createdGte, email, name, phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CustomerListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerServiceUpdateCustomer
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerServiceUpdateCustomerCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerServiceUpdateCustomerValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerServiceUpdateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerServiceUpdateCustomerCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return V1CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CustomerResponse customerServiceUpdateCustomer(String id) throws ApiException {
        ApiResponse<V1CustomerResponse> resp = customerServiceUpdateCustomerWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;V1CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CustomerResponse> customerServiceUpdateCustomerWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = customerServiceUpdateCustomerValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerServiceUpdateCustomerAsync(String id, final ApiCallback<V1CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerServiceUpdateCustomerValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
